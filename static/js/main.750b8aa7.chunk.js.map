{"version":3,"sources":["App.tsx","index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAMMA,EAAa,CAChB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGFC,EAAoB,WAEvB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBH,GAgBgBA,IAC1BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBX,KAgB2B,kBAAM,MAG9C,OAAOH,GA4GKK,EAzGO,WAAO,IAAD,EACDC,oBAAS,WAC9B,OAAOP,OAFe,mBAClBQ,EADkB,KACZC,EADY,OAKKF,oBAAS,GALd,mBAKlBG,EALkB,KAKTC,EALS,KAOnBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC1BJ,EAAWE,UAIhBL,GAAQ,SAAAQ,GACL,OAAOC,YAAQD,GAAG,SAAAE,GACf,IAD4B,IAAD,WAClBjB,GACN,IAFwB,eAEfkB,GACN,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACtBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EAEdC,GAAQ,GACRA,EAhDR,IAiDQC,GAAQ,GACRA,EAjDR,KAmDQL,GAAaJ,EAAEQ,GAAMC,OAIvBL,EAAY,GAAKA,EAAY,EAC9BF,EAASjB,GAAGkB,GAAK,EACG,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IACzBF,EAASjB,GAAGkB,GAAK,IAlBdA,EAAI,EAAGA,EAxCf,GAwC4BA,IAAM,EAA1BA,IADHlB,EAAI,EAAGA,EAxCZ,GAwCyBA,IAAM,EAA1BA,SA0BfyB,WAAWZ,EAAe,QAC1B,IAEH,OACG,kBAAC,WAAD,KACG,4BACGa,QAAS,WACNjB,GAAYD,GACPA,IACFE,EAAWE,SAAU,EACrBC,OAILL,EAAU,OAAS,SAEvB,4BACGkB,QAAS,WAEN,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EArFf,GAqF4BA,IAC1BD,EAAKE,KACFC,MAAMC,KAAKD,MAtFhB,KAsFgC,kBACxByB,KAAKC,SAAW,GAAM,EAAI,MAInCrB,EAAQR,KAVd,UAeA,4BAAQ2B,QAAS,kBAAMnB,EAAQT,OAA/B,SACA,yBACG+B,MAAO,CACJC,QAAS,OACTC,oBAAoB,UAAD,OApGlB,GAoGkB,aAGrBzB,EAAK0B,KAAI,SAACjC,EAAMC,GAAP,OACPD,EAAKiC,KAAI,SAACC,EAAKf,GAAN,OACN,yBACGgB,IAAG,UAAKlC,EAAL,YAAUkB,GACbQ,QAAS,WACN,IAAMS,EAAUnB,YAAQV,GAAM,SAAAW,GAC3BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAErCX,EAAQ4B,IAEXN,MAAO,CACJO,MAAO,GACPC,OAAQ,GACRC,gBAAiBhC,EAAKN,GAAGkB,GAAK,cAAWqB,EACzCC,OAAQ,gCCrHhCC,IAASC,OACN,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHC,SAASC,eAAe,U","file":"static/js/main.750b8aa7.chunk.js","sourcesContent":["import React, { useState, Fragment, useCallback, useRef } from 'react';\nimport produce from 'immer';\n\nconst numRows = 31;\nconst numCols = 75;\n\nconst operations = [\n   [0, 1],\n   [0, -1],\n   [1, -1],\n   [-1, 1],\n   [1, 1],\n   [-1, -1],\n   [1, 0],\n   [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n   const rows = [];\n   for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n   }\n\n   return rows;\n};\n\nconst App: React.FC = () => {\n   const [grid, setGrid] = useState(() => {\n      return generateEmptyGrid();\n   });\n\n   const [running, setRunning] = useState(false);\n\n   const runningRef = useRef(running);\n   runningRef.current = running;\n\n   const runSimulation = useCallback(() => {\n      if (!runningRef.current) {\n         return;\n      }\n\n      setGrid(g => {\n         return produce(g, gridCopy => {\n            for (let i = 0; i < numRows; i++) {\n               for (let k = 0; k < numCols; k++) {\n                  let neighbors = 0;\n                  operations.forEach(([x, y]) => {\n                     const newI = i + x;\n                     const newK = k + y;\n                     if (\n                        newI >= 0 &&\n                        newI < numRows &&\n                        newK >= 0 &&\n                        newK < numCols\n                     ) {\n                        neighbors += g[newI][newK];\n                     }\n                  });\n\n                  if (neighbors < 2 || neighbors > 3) {\n                     gridCopy[i][k] = 0;\n                  } else if (g[i][k] === 0 && neighbors === 3) {\n                     gridCopy[i][k] = 1;\n                  }\n               }\n            }\n         });\n      });\n\n      setTimeout(runSimulation, 200);\n   }, []);\n\n   return (\n      <Fragment>\n         <button\n            onClick={() => {\n               setRunning(!running);\n               if (!running) {\n                  runningRef.current = true;\n                  runSimulation();\n               }\n            }}\n         >\n            {running ? 'stop' : 'start'}\n         </button>\n         <button\n            onClick={() => {\n               const rows = [];\n               for (let i = 0; i < numRows; i++) {\n                  rows.push(\n                     Array.from(Array(numCols), () =>\n                        Math.random() > 0.8 ? 1 : 0\n                     )\n                  );\n               }\n               setGrid(rows);\n            }}\n         >\n            random\n         </button>\n         <button onClick={() => setGrid(generateEmptyGrid())}>clear</button>\n         <div\n            style={{\n               display: 'grid',\n               gridTemplateColumns: `repeat(${numCols}, 20px)`\n            }}\n         >\n            {grid.map((rows, i) =>\n               rows.map((col, k) => (\n                  <div\n                     key={`${i}-${k}`}\n                     onClick={() => {\n                        const newGrid = produce(grid, gridCopy => {\n                           gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                        });\n                        setGrid(newGrid);\n                     }}\n                     style={{\n                        width: 20,\n                        height: 20,\n                        backgroundColor: grid[i][k] ? 'purple' : undefined,\n                        border: 'solid 1.2px black'\n                     }}\n                  ></div>\n               ))\n            )}\n         </div>\n      </Fragment>\n   );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}